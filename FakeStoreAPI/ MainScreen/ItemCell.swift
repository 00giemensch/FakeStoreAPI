//
//  ItemCell.swift
//  FakeStoreAPI
//
//  Created by Ilnur on 10.08.2025.
//

import UIKit

final class ItemCell: UITableViewCell {
    
    var completion: ( () -> Void )?
    
    
    lazy var btn: UIButton = {
        let action = UIAction(handler: { [weak self] _ in
            self?.completion?()
        })
        let btn = UIButton(primaryAction: action)
        btn.backgroundColor = .blue
        btn.setTitleColor(.white, for: .normal)
        btn.layer.cornerRadius = 20
        btn.setTitle("–ö—É–ø–∏—Ç—å", for: .normal)
        btn.translatesAutoresizingMaskIntoConstraints = false
        return btn
    }()
// Lbls
    lazy var cellTitleLbl: UILabel = {
        $0.translatesAutoresizingMaskIntoConstraints = false
        $0.font = UIFont.systemFont(ofSize: 20, weight: .bold)
        $0.textColor = .black
        return $0
    }(UILabel())
    
    lazy var cellPriceLbl: UILabel = {
        $0.translatesAutoresizingMaskIntoConstraints = false
        $0.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        $0.textColor = .systemGreen
        return $0
    }(UILabel())
//
    
    lazy var cellView: UIView = {
        $0.backgroundColor = .clear
        $0.translatesAutoresizingMaskIntoConstraints = false
        $0.heightAnchor.constraint(equalToConstant: 150).isActive = true
        return $0
    }(UIView())

    
    lazy var cellImage: UIImageView = {
        $0.translatesAutoresizingMaskIntoConstraints = false
        $0.heightAnchor.constraint(equalToConstant: 80).isActive = true
        $0.widthAnchor.constraint(equalToConstant: 80).isActive = true
        $0.contentMode = .scaleAspectFill
//        $0.layer.cornerRadius = 5
        $0.clipsToBounds = true
        $0.isUserInteractionEnabled = true //–±–µ–∑ —ç—Ç–æ–≥–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞ UIImageView
        return $0
    }(UIImageView())
    
    
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        clipsToBounds = true //—á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ª–∞–∑–∏–ª–æ –∑–∞ —Ä–∞–º–∫–∏
    }
    
    override func prepareForReuse() {
        cellImage.image = nil
        cellTitleLbl.text = nil
    }
     
    
    func setupCell(item: Item) { //–ø–∞—Ä–∞–º–µ—Ç—Ä: –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö (–º–æ–¥–µ–ª—å)
        cellTitleLbl.text = item.title
        cellPriceLbl.text = item.price
        cellImage.image = UIImage(named: item.image)
//        contentView.addSubview(cellView)
//        cellView.addSubview(cellImage)
        contentView.addSubview(cellTitleLbl)
        contentView.addSubview(cellPriceLbl)
        contentView.addSubview(cellImage)
//        cellImage.addSubview(btn)
        
        
        setupConstraints()
    }
    
    func setupConstraints() {
        NSLayoutConstraint.activate([
            cellImage.topAnchor.constraint(equalTo: contentView.topAnchor,constant: 10),
            cellImage.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
//            cellImage.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
//            cellImage.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),
            
            cellTitleLbl.topAnchor.constraint(equalTo: contentView.topAnchor,constant: 1),
            cellTitleLbl.leadingAnchor.constraint(equalTo: cellImage.trailingAnchor, constant: 16),
            cellTitleLbl.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            cellTitleLbl.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),
            
            cellPriceLbl.topAnchor.constraint(equalTo: contentView.topAnchor,constant: 1),
//            cellPriceLbl.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            cellPriceLbl.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            cellPriceLbl.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),
            
        ])
    }
    
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
     
}

/*
 /*
  +-----------------------------------------------------+
  |                –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ (–æ–ø—Ü.)              |
  +-----------------------------------------------------+
  | [ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ üëã ]                                  | ‚Üê –∫–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä—Ö—É
  +-----------------------------------------------------+
  |                                                     |
  | [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 1]   -   $12.99                    | ‚Üê UITableView
  | [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 2]   -   $8.49                     |
  | [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 3]   -   $42.00                    |
  | ...                                                 |
  | [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ N]   -   $10.99                    |
  |                                                     |
  +-----------------------------------------------------+
 
  1. –ù–∞ —ç–∫—Ä–∞–Ω–µ 2 —ç–ª–µ–º–µ–Ω—Ç–∞:
  1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  2. –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ¬ª
  2. –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
  3. –ü—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã.
  4. –°–ø–∏—Å–æ–∫ API –Ω–∞ –≤—ã–±–æ—Ä (–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é):
  1. –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è API: https://fakestoreapi.com. –≠–Ω–¥–ø–æ–∏–Ω—Ç:
  https://fakestoreapi.com/products. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ (title) –∏ —Ü–µ–Ω—É
  (price). –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–µ—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é.
  
  */
 */
